// Generated by view binder compiler. Do not edit!
package nodomain.freeyourgadget.gadgetbridge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nodomain.freeyourgadget.gadgetbridge.R;

public final class ActivityWorldClockDetailsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialCardView cardCode;

  @NonNull
  public final MaterialCardView cardEnabled;

  @NonNull
  public final MaterialCardView cardLabel;

  @NonNull
  public final MaterialCardView cardTimezone;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final FloatingActionButton fabSave;

  @NonNull
  public final TextView labelCode;

  @NonNull
  public final TextView labelMessage;

  @NonNull
  public final TextView labelTimezone;

  @NonNull
  public final EditText worldClockCode;

  @NonNull
  public final CheckBox worldClockEnabled;

  @NonNull
  public final EditText worldClockLabel;

  @NonNull
  public final TextView worldClockTimezone;

  private ActivityWorldClockDetailsBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialCardView cardCode, @NonNull MaterialCardView cardEnabled,
      @NonNull MaterialCardView cardLabel, @NonNull MaterialCardView cardTimezone,
      @NonNull ConstraintLayout constraintLayout, @NonNull FloatingActionButton fabSave,
      @NonNull TextView labelCode, @NonNull TextView labelMessage, @NonNull TextView labelTimezone,
      @NonNull EditText worldClockCode, @NonNull CheckBox worldClockEnabled,
      @NonNull EditText worldClockLabel, @NonNull TextView worldClockTimezone) {
    this.rootView = rootView;
    this.cardCode = cardCode;
    this.cardEnabled = cardEnabled;
    this.cardLabel = cardLabel;
    this.cardTimezone = cardTimezone;
    this.constraintLayout = constraintLayout;
    this.fabSave = fabSave;
    this.labelCode = labelCode;
    this.labelMessage = labelMessage;
    this.labelTimezone = labelTimezone;
    this.worldClockCode = worldClockCode;
    this.worldClockEnabled = worldClockEnabled;
    this.worldClockLabel = worldClockLabel;
    this.worldClockTimezone = worldClockTimezone;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWorldClockDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWorldClockDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_world_clock_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWorldClockDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_code;
      MaterialCardView cardCode = ViewBindings.findChildViewById(rootView, id);
      if (cardCode == null) {
        break missingId;
      }

      id = R.id.card_enabled;
      MaterialCardView cardEnabled = ViewBindings.findChildViewById(rootView, id);
      if (cardEnabled == null) {
        break missingId;
      }

      id = R.id.card_label;
      MaterialCardView cardLabel = ViewBindings.findChildViewById(rootView, id);
      if (cardLabel == null) {
        break missingId;
      }

      id = R.id.card_timezone;
      MaterialCardView cardTimezone = ViewBindings.findChildViewById(rootView, id);
      if (cardTimezone == null) {
        break missingId;
      }

      ConstraintLayout constraintLayout = (ConstraintLayout) rootView;

      id = R.id.fab_save;
      FloatingActionButton fabSave = ViewBindings.findChildViewById(rootView, id);
      if (fabSave == null) {
        break missingId;
      }

      id = R.id.label_code;
      TextView labelCode = ViewBindings.findChildViewById(rootView, id);
      if (labelCode == null) {
        break missingId;
      }

      id = R.id.label_message;
      TextView labelMessage = ViewBindings.findChildViewById(rootView, id);
      if (labelMessage == null) {
        break missingId;
      }

      id = R.id.label_timezone;
      TextView labelTimezone = ViewBindings.findChildViewById(rootView, id);
      if (labelTimezone == null) {
        break missingId;
      }

      id = R.id.world_clock_code;
      EditText worldClockCode = ViewBindings.findChildViewById(rootView, id);
      if (worldClockCode == null) {
        break missingId;
      }

      id = R.id.world_clock_enabled;
      CheckBox worldClockEnabled = ViewBindings.findChildViewById(rootView, id);
      if (worldClockEnabled == null) {
        break missingId;
      }

      id = R.id.world_clock_label;
      EditText worldClockLabel = ViewBindings.findChildViewById(rootView, id);
      if (worldClockLabel == null) {
        break missingId;
      }

      id = R.id.world_clock_timezone;
      TextView worldClockTimezone = ViewBindings.findChildViewById(rootView, id);
      if (worldClockTimezone == null) {
        break missingId;
      }

      return new ActivityWorldClockDetailsBinding((ConstraintLayout) rootView, cardCode,
          cardEnabled, cardLabel, cardTimezone, constraintLayout, fabSave, labelCode, labelMessage,
          labelTimezone, worldClockCode, worldClockEnabled, worldClockLabel, worldClockTimezone);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
