// Generated by view binder compiler. Do not edit!
package nodomain.freeyourgadget.gadgetbridge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.gridlayout.widget.GridLayout;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nodomain.freeyourgadget.gadgetbridge.R;

public final class ActivitySolarEquipmentStatusBinding implements ViewBinding {
  @NonNull
  private final SwipeRefreshLayout rootView;

  @NonNull
  public final GridLayout solarequipmentviewGridlayout;

  @NonNull
  public final SwipeRefreshLayout solarequipmentviewSwipeLayout;

  private ActivitySolarEquipmentStatusBinding(@NonNull SwipeRefreshLayout rootView,
      @NonNull GridLayout solarequipmentviewGridlayout,
      @NonNull SwipeRefreshLayout solarequipmentviewSwipeLayout) {
    this.rootView = rootView;
    this.solarequipmentviewGridlayout = solarequipmentviewGridlayout;
    this.solarequipmentviewSwipeLayout = solarequipmentviewSwipeLayout;
  }

  @Override
  @NonNull
  public SwipeRefreshLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySolarEquipmentStatusBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySolarEquipmentStatusBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_solar_equipment_status, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySolarEquipmentStatusBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.solarequipmentview_gridlayout;
      GridLayout solarequipmentviewGridlayout = ViewBindings.findChildViewById(rootView, id);
      if (solarequipmentviewGridlayout == null) {
        break missingId;
      }

      SwipeRefreshLayout solarequipmentviewSwipeLayout = (SwipeRefreshLayout) rootView;

      return new ActivitySolarEquipmentStatusBinding((SwipeRefreshLayout) rootView,
          solarequipmentviewGridlayout, solarequipmentviewSwipeLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
