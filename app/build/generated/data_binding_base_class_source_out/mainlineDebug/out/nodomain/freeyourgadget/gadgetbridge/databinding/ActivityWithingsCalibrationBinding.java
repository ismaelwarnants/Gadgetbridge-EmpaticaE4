// Generated by view binder compiler. Do not edit!
package nodomain.freeyourgadget.gadgetbridge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nodomain.freeyourgadget.gadgetbridge.R;
import nodomain.freeyourgadget.gadgetbridge.devices.withingssteelhr.RotaryControl;

public final class ActivityWithingsCalibrationBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RotaryControl rotaryControl;

  @NonNull
  public final Button withingsCalibrationButtonNext;

  @NonNull
  public final Button withingsCalibrationButtonOk;

  @NonNull
  public final Button withingsCalibrationButtonPrevious;

  @NonNull
  public final TextView withingsCalibrationTextview;

  private ActivityWithingsCalibrationBinding(@NonNull RelativeLayout rootView,
      @NonNull RotaryControl rotaryControl, @NonNull Button withingsCalibrationButtonNext,
      @NonNull Button withingsCalibrationButtonOk,
      @NonNull Button withingsCalibrationButtonPrevious,
      @NonNull TextView withingsCalibrationTextview) {
    this.rootView = rootView;
    this.rotaryControl = rotaryControl;
    this.withingsCalibrationButtonNext = withingsCalibrationButtonNext;
    this.withingsCalibrationButtonOk = withingsCalibrationButtonOk;
    this.withingsCalibrationButtonPrevious = withingsCalibrationButtonPrevious;
    this.withingsCalibrationTextview = withingsCalibrationTextview;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityWithingsCalibrationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityWithingsCalibrationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_withings_calibration, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityWithingsCalibrationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.rotary_control;
      RotaryControl rotaryControl = ViewBindings.findChildViewById(rootView, id);
      if (rotaryControl == null) {
        break missingId;
      }

      id = R.id.withings_calibration_button_next;
      Button withingsCalibrationButtonNext = ViewBindings.findChildViewById(rootView, id);
      if (withingsCalibrationButtonNext == null) {
        break missingId;
      }

      id = R.id.withings_calibration_button_ok;
      Button withingsCalibrationButtonOk = ViewBindings.findChildViewById(rootView, id);
      if (withingsCalibrationButtonOk == null) {
        break missingId;
      }

      id = R.id.withings_calibration_button_previous;
      Button withingsCalibrationButtonPrevious = ViewBindings.findChildViewById(rootView, id);
      if (withingsCalibrationButtonPrevious == null) {
        break missingId;
      }

      id = R.id.withings_calibration_textview;
      TextView withingsCalibrationTextview = ViewBindings.findChildViewById(rootView, id);
      if (withingsCalibrationTextview == null) {
        break missingId;
      }

      return new ActivityWithingsCalibrationBinding((RelativeLayout) rootView, rotaryControl,
          withingsCalibrationButtonNext, withingsCalibrationButtonOk,
          withingsCalibrationButtonPrevious, withingsCalibrationTextview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
