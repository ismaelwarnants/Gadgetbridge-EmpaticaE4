// Generated by view binder compiler. Do not edit!
package nodomain.freeyourgadget.gadgetbridge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nodomain.freeyourgadget.gadgetbridge.R;

public final class ItemWithDetailsSmallBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView itemDetails;

  @NonNull
  public final ImageView itemImage;

  @NonNull
  public final TextView itemName;

  @NonNull
  public final ImageView itemPreview;

  private ItemWithDetailsSmallBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView itemDetails, @NonNull ImageView itemImage, @NonNull TextView itemName,
      @NonNull ImageView itemPreview) {
    this.rootView = rootView;
    this.itemDetails = itemDetails;
    this.itemImage = itemImage;
    this.itemName = itemName;
    this.itemPreview = itemPreview;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemWithDetailsSmallBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemWithDetailsSmallBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_with_details_small, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemWithDetailsSmallBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.item_details;
      TextView itemDetails = ViewBindings.findChildViewById(rootView, id);
      if (itemDetails == null) {
        break missingId;
      }

      id = R.id.item_image;
      ImageView itemImage = ViewBindings.findChildViewById(rootView, id);
      if (itemImage == null) {
        break missingId;
      }

      id = R.id.item_name;
      TextView itemName = ViewBindings.findChildViewById(rootView, id);
      if (itemName == null) {
        break missingId;
      }

      id = R.id.item_preview;
      ImageView itemPreview = ViewBindings.findChildViewById(rootView, id);
      if (itemPreview == null) {
        break missingId;
      }

      return new ItemWithDetailsSmallBinding((RelativeLayout) rootView, itemDetails, itemImage,
          itemName, itemPreview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
