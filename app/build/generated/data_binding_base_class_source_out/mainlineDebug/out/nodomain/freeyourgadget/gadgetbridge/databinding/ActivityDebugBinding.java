// Generated by view binder compiler. Do not edit!
package nodomain.freeyourgadget.gadgetbridge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nodomain.freeyourgadget.gadgetbridge.R;

public final class ActivityDebugBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button HeartRateButton;

  @NonNull
  public final Button SetFetchTimeButton;

  @NonNull
  public final CheckBox activityListDebugExtraTimeRange;

  @NonNull
  public final Button addDeviceButtonDebug;

  @NonNull
  public final Button cameraOpen;

  @NonNull
  public final Button deleteWidgets;

  @NonNull
  public final Button deleteWidgetsPrefs;

  @NonNull
  public final EditText editContent;

  @NonNull
  public final Button endCallButton;

  @NonNull
  public final Button factoryResetButton;

  @NonNull
  public final Button fetchDebugLogsButton;

  @NonNull
  public final Button incomingCallButton;

  @NonNull
  public final Button outgoingCallButton;

  @NonNull
  public final Button pairAsCompanion;

  @NonNull
  public final Button rebootButton;

  @NonNull
  public final Button removeDevicePreferences;

  @NonNull
  public final Button runDebugFunction;

  @NonNull
  public final ScrollView scrollView;

  @NonNull
  public final Button sendButton;

  @NonNull
  public final Spinner sendTypeSpinner;

  @NonNull
  public final Button setMusicInfoButton;

  @NonNull
  public final Button setTimeButton;

  @NonNull
  public final Button setWeatherButton;

  @NonNull
  public final Button shareLog;

  @NonNull
  public final Button showCachedWeatherButton;

  @NonNull
  public final Button showCompanionDevices;

  @NonNull
  public final Button showStatusFitnessAppTracking;

  @NonNull
  public final Button showWidgetsButton;

  @NonNull
  public final Button showWidgetsPrefs;

  @NonNull
  public final Button startCallButton;

  @NonNull
  public final Button startFitnessAppTracking;

  @NonNull
  public final Button startPermissionsActivity;

  @NonNull
  public final Button startWelcomeActivity;

  @NonNull
  public final Button stopFitnessAppTracking;

  @NonNull
  public final Button stopPhoneGpsLocationListener;

  @NonNull
  public final Button testNewFunctionality;

  @NonNull
  public final Button testNotificationButton;

  @NonNull
  public final Button testPebbleKitNotificationButton;

  @NonNull
  public final TextView textView;

  private ActivityDebugBinding(@NonNull RelativeLayout rootView, @NonNull Button HeartRateButton,
      @NonNull Button SetFetchTimeButton, @NonNull CheckBox activityListDebugExtraTimeRange,
      @NonNull Button addDeviceButtonDebug, @NonNull Button cameraOpen,
      @NonNull Button deleteWidgets, @NonNull Button deleteWidgetsPrefs,
      @NonNull EditText editContent, @NonNull Button endCallButton,
      @NonNull Button factoryResetButton, @NonNull Button fetchDebugLogsButton,
      @NonNull Button incomingCallButton, @NonNull Button outgoingCallButton,
      @NonNull Button pairAsCompanion, @NonNull Button rebootButton,
      @NonNull Button removeDevicePreferences, @NonNull Button runDebugFunction,
      @NonNull ScrollView scrollView, @NonNull Button sendButton, @NonNull Spinner sendTypeSpinner,
      @NonNull Button setMusicInfoButton, @NonNull Button setTimeButton,
      @NonNull Button setWeatherButton, @NonNull Button shareLog,
      @NonNull Button showCachedWeatherButton, @NonNull Button showCompanionDevices,
      @NonNull Button showStatusFitnessAppTracking, @NonNull Button showWidgetsButton,
      @NonNull Button showWidgetsPrefs, @NonNull Button startCallButton,
      @NonNull Button startFitnessAppTracking, @NonNull Button startPermissionsActivity,
      @NonNull Button startWelcomeActivity, @NonNull Button stopFitnessAppTracking,
      @NonNull Button stopPhoneGpsLocationListener, @NonNull Button testNewFunctionality,
      @NonNull Button testNotificationButton, @NonNull Button testPebbleKitNotificationButton,
      @NonNull TextView textView) {
    this.rootView = rootView;
    this.HeartRateButton = HeartRateButton;
    this.SetFetchTimeButton = SetFetchTimeButton;
    this.activityListDebugExtraTimeRange = activityListDebugExtraTimeRange;
    this.addDeviceButtonDebug = addDeviceButtonDebug;
    this.cameraOpen = cameraOpen;
    this.deleteWidgets = deleteWidgets;
    this.deleteWidgetsPrefs = deleteWidgetsPrefs;
    this.editContent = editContent;
    this.endCallButton = endCallButton;
    this.factoryResetButton = factoryResetButton;
    this.fetchDebugLogsButton = fetchDebugLogsButton;
    this.incomingCallButton = incomingCallButton;
    this.outgoingCallButton = outgoingCallButton;
    this.pairAsCompanion = pairAsCompanion;
    this.rebootButton = rebootButton;
    this.removeDevicePreferences = removeDevicePreferences;
    this.runDebugFunction = runDebugFunction;
    this.scrollView = scrollView;
    this.sendButton = sendButton;
    this.sendTypeSpinner = sendTypeSpinner;
    this.setMusicInfoButton = setMusicInfoButton;
    this.setTimeButton = setTimeButton;
    this.setWeatherButton = setWeatherButton;
    this.shareLog = shareLog;
    this.showCachedWeatherButton = showCachedWeatherButton;
    this.showCompanionDevices = showCompanionDevices;
    this.showStatusFitnessAppTracking = showStatusFitnessAppTracking;
    this.showWidgetsButton = showWidgetsButton;
    this.showWidgetsPrefs = showWidgetsPrefs;
    this.startCallButton = startCallButton;
    this.startFitnessAppTracking = startFitnessAppTracking;
    this.startPermissionsActivity = startPermissionsActivity;
    this.startWelcomeActivity = startWelcomeActivity;
    this.stopFitnessAppTracking = stopFitnessAppTracking;
    this.stopPhoneGpsLocationListener = stopPhoneGpsLocationListener;
    this.testNewFunctionality = testNewFunctionality;
    this.testNotificationButton = testNotificationButton;
    this.testPebbleKitNotificationButton = testPebbleKitNotificationButton;
    this.textView = textView;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDebugBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDebugBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_debug, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDebugBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.HeartRateButton;
      Button HeartRateButton = ViewBindings.findChildViewById(rootView, id);
      if (HeartRateButton == null) {
        break missingId;
      }

      id = R.id.SetFetchTimeButton;
      Button SetFetchTimeButton = ViewBindings.findChildViewById(rootView, id);
      if (SetFetchTimeButton == null) {
        break missingId;
      }

      id = R.id.activity_list_debug_extra_time_range;
      CheckBox activityListDebugExtraTimeRange = ViewBindings.findChildViewById(rootView, id);
      if (activityListDebugExtraTimeRange == null) {
        break missingId;
      }

      id = R.id.addDeviceButtonDebug;
      Button addDeviceButtonDebug = ViewBindings.findChildViewById(rootView, id);
      if (addDeviceButtonDebug == null) {
        break missingId;
      }

      id = R.id.cameraOpen;
      Button cameraOpen = ViewBindings.findChildViewById(rootView, id);
      if (cameraOpen == null) {
        break missingId;
      }

      id = R.id.deleteWidgets;
      Button deleteWidgets = ViewBindings.findChildViewById(rootView, id);
      if (deleteWidgets == null) {
        break missingId;
      }

      id = R.id.deleteWidgetsPrefs;
      Button deleteWidgetsPrefs = ViewBindings.findChildViewById(rootView, id);
      if (deleteWidgetsPrefs == null) {
        break missingId;
      }

      id = R.id.editContent;
      EditText editContent = ViewBindings.findChildViewById(rootView, id);
      if (editContent == null) {
        break missingId;
      }

      id = R.id.endCallButton;
      Button endCallButton = ViewBindings.findChildViewById(rootView, id);
      if (endCallButton == null) {
        break missingId;
      }

      id = R.id.factoryResetButton;
      Button factoryResetButton = ViewBindings.findChildViewById(rootView, id);
      if (factoryResetButton == null) {
        break missingId;
      }

      id = R.id.fetchDebugLogsButton;
      Button fetchDebugLogsButton = ViewBindings.findChildViewById(rootView, id);
      if (fetchDebugLogsButton == null) {
        break missingId;
      }

      id = R.id.incomingCallButton;
      Button incomingCallButton = ViewBindings.findChildViewById(rootView, id);
      if (incomingCallButton == null) {
        break missingId;
      }

      id = R.id.outgoingCallButton;
      Button outgoingCallButton = ViewBindings.findChildViewById(rootView, id);
      if (outgoingCallButton == null) {
        break missingId;
      }

      id = R.id.pairAsCompanion;
      Button pairAsCompanion = ViewBindings.findChildViewById(rootView, id);
      if (pairAsCompanion == null) {
        break missingId;
      }

      id = R.id.rebootButton;
      Button rebootButton = ViewBindings.findChildViewById(rootView, id);
      if (rebootButton == null) {
        break missingId;
      }

      id = R.id.removeDevicePreferences;
      Button removeDevicePreferences = ViewBindings.findChildViewById(rootView, id);
      if (removeDevicePreferences == null) {
        break missingId;
      }

      id = R.id.runDebugFunction;
      Button runDebugFunction = ViewBindings.findChildViewById(rootView, id);
      if (runDebugFunction == null) {
        break missingId;
      }

      id = R.id.scrollView;
      ScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.sendButton;
      Button sendButton = ViewBindings.findChildViewById(rootView, id);
      if (sendButton == null) {
        break missingId;
      }

      id = R.id.sendTypeSpinner;
      Spinner sendTypeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (sendTypeSpinner == null) {
        break missingId;
      }

      id = R.id.setMusicInfoButton;
      Button setMusicInfoButton = ViewBindings.findChildViewById(rootView, id);
      if (setMusicInfoButton == null) {
        break missingId;
      }

      id = R.id.setTimeButton;
      Button setTimeButton = ViewBindings.findChildViewById(rootView, id);
      if (setTimeButton == null) {
        break missingId;
      }

      id = R.id.setWeatherButton;
      Button setWeatherButton = ViewBindings.findChildViewById(rootView, id);
      if (setWeatherButton == null) {
        break missingId;
      }

      id = R.id.shareLog;
      Button shareLog = ViewBindings.findChildViewById(rootView, id);
      if (shareLog == null) {
        break missingId;
      }

      id = R.id.showCachedWeatherButton;
      Button showCachedWeatherButton = ViewBindings.findChildViewById(rootView, id);
      if (showCachedWeatherButton == null) {
        break missingId;
      }

      id = R.id.showCompanionDevices;
      Button showCompanionDevices = ViewBindings.findChildViewById(rootView, id);
      if (showCompanionDevices == null) {
        break missingId;
      }

      id = R.id.showStatusFitnessAppTracking;
      Button showStatusFitnessAppTracking = ViewBindings.findChildViewById(rootView, id);
      if (showStatusFitnessAppTracking == null) {
        break missingId;
      }

      id = R.id.showWidgetsButton;
      Button showWidgetsButton = ViewBindings.findChildViewById(rootView, id);
      if (showWidgetsButton == null) {
        break missingId;
      }

      id = R.id.showWidgetsPrefs;
      Button showWidgetsPrefs = ViewBindings.findChildViewById(rootView, id);
      if (showWidgetsPrefs == null) {
        break missingId;
      }

      id = R.id.startCallButton;
      Button startCallButton = ViewBindings.findChildViewById(rootView, id);
      if (startCallButton == null) {
        break missingId;
      }

      id = R.id.startFitnessAppTracking;
      Button startFitnessAppTracking = ViewBindings.findChildViewById(rootView, id);
      if (startFitnessAppTracking == null) {
        break missingId;
      }

      id = R.id.startPermissionsActivity;
      Button startPermissionsActivity = ViewBindings.findChildViewById(rootView, id);
      if (startPermissionsActivity == null) {
        break missingId;
      }

      id = R.id.startWelcomeActivity;
      Button startWelcomeActivity = ViewBindings.findChildViewById(rootView, id);
      if (startWelcomeActivity == null) {
        break missingId;
      }

      id = R.id.stopFitnessAppTracking;
      Button stopFitnessAppTracking = ViewBindings.findChildViewById(rootView, id);
      if (stopFitnessAppTracking == null) {
        break missingId;
      }

      id = R.id.stopPhoneGpsLocationListener;
      Button stopPhoneGpsLocationListener = ViewBindings.findChildViewById(rootView, id);
      if (stopPhoneGpsLocationListener == null) {
        break missingId;
      }

      id = R.id.testNewFunctionality;
      Button testNewFunctionality = ViewBindings.findChildViewById(rootView, id);
      if (testNewFunctionality == null) {
        break missingId;
      }

      id = R.id.testNotificationButton;
      Button testNotificationButton = ViewBindings.findChildViewById(rootView, id);
      if (testNotificationButton == null) {
        break missingId;
      }

      id = R.id.testPebbleKitNotificationButton;
      Button testPebbleKitNotificationButton = ViewBindings.findChildViewById(rootView, id);
      if (testPebbleKitNotificationButton == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      return new ActivityDebugBinding((RelativeLayout) rootView, HeartRateButton,
          SetFetchTimeButton, activityListDebugExtraTimeRange, addDeviceButtonDebug, cameraOpen,
          deleteWidgets, deleteWidgetsPrefs, editContent, endCallButton, factoryResetButton,
          fetchDebugLogsButton, incomingCallButton, outgoingCallButton, pairAsCompanion,
          rebootButton, removeDevicePreferences, runDebugFunction, scrollView, sendButton,
          sendTypeSpinner, setMusicInfoButton, setTimeButton, setWeatherButton, shareLog,
          showCachedWeatherButton, showCompanionDevices, showStatusFitnessAppTracking,
          showWidgetsButton, showWidgetsPrefs, startCallButton, startFitnessAppTracking,
          startPermissionsActivity, startWelcomeActivity, stopFitnessAppTracking,
          stopPhoneGpsLocationListener, testNewFunctionality, testNotificationButton,
          testPebbleKitNotificationButton, textView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
