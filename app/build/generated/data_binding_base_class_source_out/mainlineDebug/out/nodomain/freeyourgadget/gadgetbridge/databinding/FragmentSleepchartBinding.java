// Generated by view binder compiler. Do not edit!
package nodomain.freeyourgadget.gadgetbridge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.mikephil.charting.charts.LineChart;
import com.google.android.material.chip.ChipGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nodomain.freeyourgadget.gadgetbridge.R;
import nodomain.freeyourgadget.gadgetbridge.activities.charts.sleep.SleepDetailsView;

public final class FragmentSleepchartBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView sleepChartLegendAwakeLegend;

  @NonNull
  public final TextView sleepChartLegendAwakeTime;

  @NonNull
  public final LinearLayout sleepChartLegendAwakeTimeWrapper;

  @NonNull
  public final TextView sleepChartLegendDeepLegend;

  @NonNull
  public final TextView sleepChartLegendDeepTime;

  @NonNull
  public final TextView sleepChartLegendLightLegend;

  @NonNull
  public final TextView sleepChartLegendLightTime;

  @NonNull
  public final LinearLayout sleepChartLegendMovementIntensityWrapper;

  @NonNull
  public final TextView sleepChartLegendRemLegend;

  @NonNull
  public final TextView sleepChartLegendRemTime;

  @NonNull
  public final LinearLayout sleepChartLegendRemTimeWrapper;

  @NonNull
  public final ChipGroup sleepChartOverlayGroup;

  @NonNull
  public final TextView sleepDate;

  @NonNull
  public final SleepDetailsView sleepDetails;

  @NonNull
  public final TextView sleepHrAverage;

  @NonNull
  public final TextView sleepHrHighest;

  @NonNull
  public final TextView sleepHrLowest;

  @NonNull
  public final TextView sleepMovementIntensity;

  @NonNull
  public final ImageView sleepStagesGauge;

  @NonNull
  public final LineChart sleepchart;

  @NonNull
  public final TextView sleepchartInfo;

  private FragmentSleepchartBinding(@NonNull ScrollView rootView,
      @NonNull TextView sleepChartLegendAwakeLegend, @NonNull TextView sleepChartLegendAwakeTime,
      @NonNull LinearLayout sleepChartLegendAwakeTimeWrapper,
      @NonNull TextView sleepChartLegendDeepLegend, @NonNull TextView sleepChartLegendDeepTime,
      @NonNull TextView sleepChartLegendLightLegend, @NonNull TextView sleepChartLegendLightTime,
      @NonNull LinearLayout sleepChartLegendMovementIntensityWrapper,
      @NonNull TextView sleepChartLegendRemLegend, @NonNull TextView sleepChartLegendRemTime,
      @NonNull LinearLayout sleepChartLegendRemTimeWrapper,
      @NonNull ChipGroup sleepChartOverlayGroup, @NonNull TextView sleepDate,
      @NonNull SleepDetailsView sleepDetails, @NonNull TextView sleepHrAverage,
      @NonNull TextView sleepHrHighest, @NonNull TextView sleepHrLowest,
      @NonNull TextView sleepMovementIntensity, @NonNull ImageView sleepStagesGauge,
      @NonNull LineChart sleepchart, @NonNull TextView sleepchartInfo) {
    this.rootView = rootView;
    this.sleepChartLegendAwakeLegend = sleepChartLegendAwakeLegend;
    this.sleepChartLegendAwakeTime = sleepChartLegendAwakeTime;
    this.sleepChartLegendAwakeTimeWrapper = sleepChartLegendAwakeTimeWrapper;
    this.sleepChartLegendDeepLegend = sleepChartLegendDeepLegend;
    this.sleepChartLegendDeepTime = sleepChartLegendDeepTime;
    this.sleepChartLegendLightLegend = sleepChartLegendLightLegend;
    this.sleepChartLegendLightTime = sleepChartLegendLightTime;
    this.sleepChartLegendMovementIntensityWrapper = sleepChartLegendMovementIntensityWrapper;
    this.sleepChartLegendRemLegend = sleepChartLegendRemLegend;
    this.sleepChartLegendRemTime = sleepChartLegendRemTime;
    this.sleepChartLegendRemTimeWrapper = sleepChartLegendRemTimeWrapper;
    this.sleepChartOverlayGroup = sleepChartOverlayGroup;
    this.sleepDate = sleepDate;
    this.sleepDetails = sleepDetails;
    this.sleepHrAverage = sleepHrAverage;
    this.sleepHrHighest = sleepHrHighest;
    this.sleepHrLowest = sleepHrLowest;
    this.sleepMovementIntensity = sleepMovementIntensity;
    this.sleepStagesGauge = sleepStagesGauge;
    this.sleepchart = sleepchart;
    this.sleepchartInfo = sleepchartInfo;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSleepchartBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSleepchartBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_sleepchart, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSleepchartBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.sleep_chart_legend_awake_legend;
      TextView sleepChartLegendAwakeLegend = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendAwakeLegend == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_awake_time;
      TextView sleepChartLegendAwakeTime = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendAwakeTime == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_awake_time_wrapper;
      LinearLayout sleepChartLegendAwakeTimeWrapper = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendAwakeTimeWrapper == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_deep_legend;
      TextView sleepChartLegendDeepLegend = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendDeepLegend == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_deep_time;
      TextView sleepChartLegendDeepTime = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendDeepTime == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_light_legend;
      TextView sleepChartLegendLightLegend = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendLightLegend == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_light_time;
      TextView sleepChartLegendLightTime = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendLightTime == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_movement_intensity_wrapper;
      LinearLayout sleepChartLegendMovementIntensityWrapper = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendMovementIntensityWrapper == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_rem_legend;
      TextView sleepChartLegendRemLegend = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendRemLegend == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_rem_time;
      TextView sleepChartLegendRemTime = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendRemTime == null) {
        break missingId;
      }

      id = R.id.sleep_chart_legend_rem_time_wrapper;
      LinearLayout sleepChartLegendRemTimeWrapper = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartLegendRemTimeWrapper == null) {
        break missingId;
      }

      id = R.id.sleep_chart_overlay_group;
      ChipGroup sleepChartOverlayGroup = ViewBindings.findChildViewById(rootView, id);
      if (sleepChartOverlayGroup == null) {
        break missingId;
      }

      id = R.id.sleep_date;
      TextView sleepDate = ViewBindings.findChildViewById(rootView, id);
      if (sleepDate == null) {
        break missingId;
      }

      id = R.id.sleep_details;
      SleepDetailsView sleepDetails = ViewBindings.findChildViewById(rootView, id);
      if (sleepDetails == null) {
        break missingId;
      }

      id = R.id.sleep_hr_average;
      TextView sleepHrAverage = ViewBindings.findChildViewById(rootView, id);
      if (sleepHrAverage == null) {
        break missingId;
      }

      id = R.id.sleep_hr_highest;
      TextView sleepHrHighest = ViewBindings.findChildViewById(rootView, id);
      if (sleepHrHighest == null) {
        break missingId;
      }

      id = R.id.sleep_hr_lowest;
      TextView sleepHrLowest = ViewBindings.findChildViewById(rootView, id);
      if (sleepHrLowest == null) {
        break missingId;
      }

      id = R.id.sleep_movement_intensity;
      TextView sleepMovementIntensity = ViewBindings.findChildViewById(rootView, id);
      if (sleepMovementIntensity == null) {
        break missingId;
      }

      id = R.id.sleep_stages_gauge;
      ImageView sleepStagesGauge = ViewBindings.findChildViewById(rootView, id);
      if (sleepStagesGauge == null) {
        break missingId;
      }

      id = R.id.sleepchart;
      LineChart sleepchart = ViewBindings.findChildViewById(rootView, id);
      if (sleepchart == null) {
        break missingId;
      }

      id = R.id.sleepchart_info;
      TextView sleepchartInfo = ViewBindings.findChildViewById(rootView, id);
      if (sleepchartInfo == null) {
        break missingId;
      }

      return new FragmentSleepchartBinding((ScrollView) rootView, sleepChartLegendAwakeLegend,
          sleepChartLegendAwakeTime, sleepChartLegendAwakeTimeWrapper, sleepChartLegendDeepLegend,
          sleepChartLegendDeepTime, sleepChartLegendLightLegend, sleepChartLegendLightTime,
          sleepChartLegendMovementIntensityWrapper, sleepChartLegendRemLegend,
          sleepChartLegendRemTime, sleepChartLegendRemTimeWrapper, sleepChartOverlayGroup,
          sleepDate, sleepDetails, sleepHrAverage, sleepHrHighest, sleepHrLowest,
          sleepMovementIntensity, sleepStagesGauge, sleepchart, sleepchartInfo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
