// Generated by view binder compiler. Do not edit!
package nodomain.freeyourgadget.gadgetbridge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nodomain.freeyourgadget.gadgetbridge.R;

public final class FragmentCaloriesBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView caloriesActive;

  @NonNull
  public final TextView caloriesActiveGoal;

  @NonNull
  public final LinearLayout caloriesActiveGoalWrapper;

  @NonNull
  public final LinearLayout caloriesActiveWrapper;

  @NonNull
  public final ImageView caloriesGauge;

  @NonNull
  public final TextView caloriesResting;

  @NonNull
  public final TextView caloriesRestingMetabolicRate;

  @NonNull
  public final LinearLayout caloriesRestingMetabolicRateWrapper;

  @NonNull
  public final LinearLayout caloriesRestingWrapper;

  @NonNull
  public final GridLayout caloriesTypesWrapper;

  @NonNull
  public final TextView dateView;

  private FragmentCaloriesBinding(@NonNull ScrollView rootView, @NonNull TextView caloriesActive,
      @NonNull TextView caloriesActiveGoal, @NonNull LinearLayout caloriesActiveGoalWrapper,
      @NonNull LinearLayout caloriesActiveWrapper, @NonNull ImageView caloriesGauge,
      @NonNull TextView caloriesResting, @NonNull TextView caloriesRestingMetabolicRate,
      @NonNull LinearLayout caloriesRestingMetabolicRateWrapper,
      @NonNull LinearLayout caloriesRestingWrapper, @NonNull GridLayout caloriesTypesWrapper,
      @NonNull TextView dateView) {
    this.rootView = rootView;
    this.caloriesActive = caloriesActive;
    this.caloriesActiveGoal = caloriesActiveGoal;
    this.caloriesActiveGoalWrapper = caloriesActiveGoalWrapper;
    this.caloriesActiveWrapper = caloriesActiveWrapper;
    this.caloriesGauge = caloriesGauge;
    this.caloriesResting = caloriesResting;
    this.caloriesRestingMetabolicRate = caloriesRestingMetabolicRate;
    this.caloriesRestingMetabolicRateWrapper = caloriesRestingMetabolicRateWrapper;
    this.caloriesRestingWrapper = caloriesRestingWrapper;
    this.caloriesTypesWrapper = caloriesTypesWrapper;
    this.dateView = dateView;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCaloriesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCaloriesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_calories, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCaloriesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.calories_active;
      TextView caloriesActive = ViewBindings.findChildViewById(rootView, id);
      if (caloriesActive == null) {
        break missingId;
      }

      id = R.id.calories_active_goal;
      TextView caloriesActiveGoal = ViewBindings.findChildViewById(rootView, id);
      if (caloriesActiveGoal == null) {
        break missingId;
      }

      id = R.id.calories_active_goal_wrapper;
      LinearLayout caloriesActiveGoalWrapper = ViewBindings.findChildViewById(rootView, id);
      if (caloriesActiveGoalWrapper == null) {
        break missingId;
      }

      id = R.id.calories_active_wrapper;
      LinearLayout caloriesActiveWrapper = ViewBindings.findChildViewById(rootView, id);
      if (caloriesActiveWrapper == null) {
        break missingId;
      }

      id = R.id.calories_gauge;
      ImageView caloriesGauge = ViewBindings.findChildViewById(rootView, id);
      if (caloriesGauge == null) {
        break missingId;
      }

      id = R.id.calories_resting;
      TextView caloriesResting = ViewBindings.findChildViewById(rootView, id);
      if (caloriesResting == null) {
        break missingId;
      }

      id = R.id.calories_resting_metabolic_rate;
      TextView caloriesRestingMetabolicRate = ViewBindings.findChildViewById(rootView, id);
      if (caloriesRestingMetabolicRate == null) {
        break missingId;
      }

      id = R.id.calories_resting_metabolic_rate_wrapper;
      LinearLayout caloriesRestingMetabolicRateWrapper = ViewBindings.findChildViewById(rootView, id);
      if (caloriesRestingMetabolicRateWrapper == null) {
        break missingId;
      }

      id = R.id.calories_resting_wrapper;
      LinearLayout caloriesRestingWrapper = ViewBindings.findChildViewById(rootView, id);
      if (caloriesRestingWrapper == null) {
        break missingId;
      }

      id = R.id.calories_types_wrapper;
      GridLayout caloriesTypesWrapper = ViewBindings.findChildViewById(rootView, id);
      if (caloriesTypesWrapper == null) {
        break missingId;
      }

      id = R.id.date_view;
      TextView dateView = ViewBindings.findChildViewById(rootView, id);
      if (dateView == null) {
        break missingId;
      }

      return new FragmentCaloriesBinding((ScrollView) rootView, caloriesActive, caloriesActiveGoal,
          caloriesActiveGoalWrapper, caloriesActiveWrapper, caloriesGauge, caloriesResting,
          caloriesRestingMetabolicRate, caloriesRestingMetabolicRateWrapper, caloriesRestingWrapper,
          caloriesTypesWrapper, dateView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
